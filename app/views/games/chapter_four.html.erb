<% provide(:title, "Chapter 4") %>

<script type="text/javascript">

  var game = new Phaser.Game(800, 576, Phaser.AUTO, '', {
    preload: preload,
    create: create,
    update: update
  });

  function preload() {

    game.load.image('garden', 'assets/garden.jpeg');
    game.load.image('ground', 'assets/platform.png');
    game.load.image('aphid', 'assets/aphid1.png');
    game.load.image('bee', 'assets/bee.png');
    game.load.image('butterfly', 'assets/butterfly1.png');
    game.load.image('ladybug', 'assets/index.png');
    game.load.image('prayingMantis', 'assets/prayingMantis.png');
    game.load.image('wurmple', 'assets/wurm.png');
    game.load.image('dung', 'assets/dung.png');
    game.load.image('grub', 'assets/grub.png');
    game.load.image('mite', 'assets/mite.png');
    game.load.image('wasp', 'assets/wasp.png');
    game.load.image('cw', 'assets/Cornworm4.png');
    game.load.image('net', 'assets/net.png', 32, 48);

  }

  var player;
  var platforms;
  var cursors;

  var friends;
  var pests;
  var score = 0;
  var scoreText;
  var bugCounter = 0;
	var positionArrayX = [19,50,70,90,110,130,150,170,190,210,230,250,270,290,310,330,350,370,390,410,430,450,470,490,510,530,550,570,590,615,635,675,699,723,732,750];
  var positionArrayY = [20,43,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380,400,440,460,480,500,520];
  Phaser.Utils.shuffle(positionArrayX);
	Phaser.Utils.shuffle(positionArrayY);
	for (var i = 0; i < 16; i++)
	{

			console.log(i + " X: " + positionArrayX[i]);
			console.log(i + " Y: " + positionArrayY[i]);

	}


  function create() {

    //  We're going to be using physics, so enable the Arcade Physics system
    game.physics.startSystem(Phaser.Physics.ARCADE);

    //  A simple background for our game

    game.add.sprite(0, 0, 'garden');

    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = game.add.group();

    //  We will enable physics for any object that is created in this group
    platforms.enableBody = true;

    // Here we create the ground.
    var ground = platforms.create(0, game.world.height - 9, 'ground');

    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    ground.scale.setTo(2, 2);

    //  This stops it from falling away when you jump on it
    ground.body.immovable = true;

    //  Now let's create two ledges
    /*var ledge = platforms.create(400, 400, 'ground');
    ledge.body.immovable = true;

    ledge = platforms.create(-150, 250, 'ground');
    ledge.body.immovable = true;*/

    // The player and its settings
    player = game.add.sprite(32, game.world.height - 150, 'net');
    player.scale.setTo(.3, .3);

    //  We need to enable physics on the player
    game.physics.arcade.enable(player);

    //  Player physics properties. Give the little guy a slight bounce.
    player.body.bounce.y = 0.2;
    player.body.gravity.y = 0;
    player.body.collideWorldBounds = true;

    //  Our two animations, walking left and right.
    player.animations.add('left', [
      0, 1, 2, 3
    ], 10, true);
    player.animations.add('right', [
      5, 6, 7, 8
    ], 10, true);

    //  Finally some stars to collect
    friends = game.add.group();

    //  We will enable physics for any star that is created in this group
    friends.enableBody = true;

    pests = game.add.group();
    pests.enableBody = true;

    var butterfly = friends.create(positionArrayX[0], positionArrayY[0], 'butterfly');
    butterfly.scale.setTo(.25, .25);
    butterfly = friends.create(positionArrayX[1], positionArrayY[1], 'butterfly');
    butterfly.scale.setTo(.25, .25);

    var bee = friends.create(positionArrayX[2], positionArrayY[2], 'bee');
    bee.scale.setTo(.5, .5);

    bee = friends.create(positionArrayX[3], positionArrayY[3], 'bee');
    bee.scale.setTo(.5, .5);

    var ladybug = friends.create(positionArrayX[4], positionArrayY[4], 'ladybug');

    var prayingMantis = friends.create(positionArrayX[5], positionArrayY[5], 'prayingMantis');

    var wurmple = pests.create(positionArrayX[6], positionArrayY[6], 'wurmple');

    wurmple = pests.create(positionArrayX[7], positionArrayY[7], 'wurmple');

    var aphid = pests.create(positionArrayX[8], positionArrayY[8], 'aphid');
    aphid.scale.setTo(1.8, 1.8);

    aphid = pests.create(positionArrayX[9], positionArrayY[9], 'aphid');
    aphid.scale.setTo(1.8, 1.8);
    var cw = pests.create(positionArrayX[10], positionArrayY[10], 'cw');
    //mite.scale.setTo(.5,.5);

    //  The score
    scoreText = game.add.text(16, 16, 'score: 0', {
      fontSize: '32px',
      fill: '#000'
    });

    //  Our controls.
    cursors = game.input.keyboard.createCursorKeys();

  }

  function update() {

    game.physics.arcade.collide(player, platforms);
    game.physics.arcade.collide(friends, platforms);
    game.physics.arcade.collide(pests, platforms);

    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
    game.physics.arcade.overlap(player, friends, collectFriend, null, this);
    game.physics.arcade.overlap(player, pests, collectPest, null, this);
    game.physics.arcade.overlap(pests, friends, respawnPest, null, this);
    game.physics.arcade.overlap(friends, pests, respawnFriend, null, this);

    //  only move when you click
    if (game.input.activePointer.isDown) {
      //  400 is the speed it will move towards the mouse
      game.physics.arcade.moveToPointer(player, 300);

      //  if it's overlapping the mouse, don't move any more
      if (Phaser.Rectangle.contains(player.body, game.input.x, game.input.y)) {
        player.body.velocity.setTo(0, 0);
      }
    } else {
      player.body.velocity.setTo(0, 0);
    }

  }

  function collectFriend(player, friend) {

    // Removes the star from the screen
    friend.kill();
    bugCounter++;
    score -= 10;
    scoreText.text = 'Score: ' + score;
    if (bugCounter == 5 || bugCounter == 9) {
      newBugs();
    }

  }
  function collectPest(player, pest) {

    // Removes the star from the screen
    pest.kill();
    bugCounter++;
    score += 25;
    scoreText.text = 'Score: ' + score;
    if (bugCounter == 5 || bugCounter == 9) {
      newBugs();
    }
  }

  function respawnFriend(friend) {
    friend.kill();
  }

  function respawnPest(pest) {
    pest.kill();
  }

  //Generate random spawns
  function randomX() {
    return Math.floor(Math.random() * (760 - 45 + 1) + 45);
  }

  function randomY() {
    return Math.floor(Math.random() * (530 - 45 + 1) + 45);
  }

  function newBugs() {
    if (bugCounter == 5) {
      wurmple = pests.create(positionArrayX[11], positionArrayY[11], 'wurmple');
      aphid = pests.create(positionArrayX[12], positionArrayY[12], 'aphid');
      aphid.scale.setTo(1.8, 1.8);
      var wasp = friends.create(positionArrayX[13], positionArrayY[13], 'wasp');
      wasp.scale.setTo(.6, .6);
      var grub = pests.create(positionArrayX[14], positionArrayY[14], 'grub');
      grub.scale.setTo(.5, .5);
      var dung = friends.create(positionArrayX[15], positionArrayY[15], 'dung');
      dung.scale.setTo(.2, .2);
      mite = pests.create(positionArrayX[16], positionArrayY[16], 'mite');
      mite.scale.setTo(.5, .5);
    } else if (bugCounter == 9) {

      $.ajax({
        url: "/save",
        type: "post",
        data: {
          data_value: JSON.stringify(score)
        }
      });

    }
  }

  function gameOver() {
    window.alert("Game Over! Score: " + score);
    game.destroy();
    window.location = "/home";

  }
  $(document).ajaxStop(function () {
    gameOver();
  });
</script>
